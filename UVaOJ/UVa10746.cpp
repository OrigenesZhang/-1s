#include <iostream>
#include <iomanip>
#include <cstring>
#include <queue>
#include <cmath>
using namespace std;
const double inf=1<<30;
int m, n, f, s, t, cap[50][50], flow[50][50], p[50];
bool inq[50];
double c, cost[50][50], d[50];
int main(){
    cout<<fixed<<setprecision(2);
    while(cin>>n>>m){
        if(!n) break;
        s=0, t=n+m+1;
        memset(cap, 0, sizeof(cap));
        memset(cost, 0, sizeof(cost));
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                cap[j+n][i]=1;
                cin>>cost[j+n][i];
                cost[i][j+n]=-cost[j+n][i];
            }
            cap[i][t]=1;
        }
        for(int i=n+1; i<=n+m; i++) cap[s][i]=1;
        c=f=0;
        queue<int> q;
        memset(flow, 0, sizeof(flow));
        for(;;){
            for(int i=0; i<=t; i++) d[i]=(i==s?0:inf);
            memset(inq, false, sizeof(inq));
            q.push(s);
            while(!q.empty()){
                int u=q.front();
                //if(f==14) cout<<u<<endl;
                q.pop();
                inq[u]=false;
                for(int v=0; v<=t; v++){
                    if(cap[u][v]>flow[u][v]&&d[v]>d[u]+cost[u][v]){
                        d[v]=d[u]+cost[u][v];
                        p[v]=u;
                        if(!inq[v]){
                            inq[v]=true;
                            q.push(v);
                        }
                    }
                }
            }
            if(fabs(d[t]-inf)<1e-8) break;
            int a=inf;
            for(int u=t; u!=s; u=p[u])
                a=min(a, cap[p[u]][u]-flow[p[u]][u]);
            for(int u=t; u!=s; u=p[u]){
                flow[p[u]][u]+=a;
                flow[u][p[u]]-=a;
            }
            c+=d[t]*a;
            f+=a;
        }
        cout<<c/n+1e-7<<endl;
    }
    return 0;
}
//这个点本地跑会死循环,不知道为什么
//OJ上可能是数据比较弱orz
/* 
19 19
99.6 49.4 67.5 28.8 66.4 16.5 86.1 80.4 48.2 37.6 90.8 10.3 31.9 14.2 49.3 86.8 90.8 1.9 46.2
86.5 7.1 47.7 64.2 29.8 78.7 92.7 67.0 19.2 43.6 32.8 10.7 78.3 17.3 78.1 42.2 18.9 29.7 28.2
34.4 77.8 0.9 25.2 23.2 32.7 74.5 72.5 54.6 65.2 9.5 35.9 86.9 16.5 83.5 86.2 81.4 62.1 78.9
48.3 81.2 57.6 16.3 91.8 35.8 33.5 5.0 78.0 52.3 34.6 41.3 86.7 47.5 77.4 47.0 70.7 45.2 21.4
43.1 99.8 21.7 87.7 35.6 43.7 4.2 19.1 29.9 20.7 16.3 8.7 69.0 97.5 1.4 85.2 89.2 37.1 53.8
29.4 50.2 41.3 63.9 26.7 27.9 11.4 4.0 10.0 82.0 49.1 66.5 60.2 84.0 23.3 47.8 19.6 67.0 87.1
73.8 96.8 7.8 90.0 40.6 11.9 22.6 41.9 32.2 47.0 14.1 85.9 76.3 64.3 27.1 75.3 26.1 90.1 21.8
65.2 35.2 38.9 14.2 1.6 99.0 33.4 24.9 82.0 88.1 27.0 4.2 61.8 23.7 11.9 86.9 99.4 58.9 44.7
76.4 91.0 91.6 90.4 12.1 3.0 89.8 39.1 78.2 15.8 64.4 100.0 80.9 99.5 38.8 30.3 1.1 73.0 63.6
61.1 90.1 86.8 88.0 94.2 83.7 46.8 41.3 70.5 46.1 0.1 50.3 57.6 91.1 77.0 47.9 3.1 79.9 37.7
77.3 93.3 88.6 76.8 28.4 69.5 76.3 2.3 34.9 12.5 75.2 33.6 8.7 0.4 20.3 96.6 94.6 3.9 43.3
71.0 9.5 24.5 71.0 59.8 82.0 97.2 36.7 65.0 35.4 51.8 37.8 47.9 45.0 26.4 24.6 73.3 31.0 36.0
75.5 65.8 83.6 85.9 34.5 92.2 86.2 54.7 88.7 15.9 93.7 67.1 86.8 3.1 26.7 57.8 98.0 43.8 90.1
34.7 8.8 60.7 21.6 46.5 8.5 66.5 72.8 68.2 39.7 38.9 4.2 50.3 39.8 87.7 36.1 74.2 79.9 22.3
64.0 3.7 73.3 57.6 6.0 60.1 60.7 32.6 53.0 93.8 76.4 43.0 63.6 20.3 3.6 85.1 66.7 47.2 51.5
74.7 15.4 26.3 13.5 54.7 76.6 53.3 77.5 12.6 27.4 92.5 70.0 91.4 96.2 43.3 84.1 37.3 3.3 79.9
69.8 91.4 73.7 81.3 69.5 37.2 1.5 73.1 22.3 3.4 55.4 73.7 78.0 5.9 35.2 91.4 60.5 11.7 79.8
38.0 59.4 7.2 65.6 29.4 33.7 96.9 7.8 17.7 34.1 46.2 97.6 39.1 37.5 6.4 20.3 6.9 43.5 57.0
15.1 0.9 60.3 5.7 74.6 38.2 11.5 44.9 64.7 7.2 56.5 44.5 80.3 15.8 86.8 45.8 80.3 20.4 42.7
 */
